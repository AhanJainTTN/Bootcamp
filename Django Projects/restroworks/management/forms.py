from django import forms
from management.models import MenuItem


# https://docs.djangoproject.com/en/5.1/topics/forms/
# https://docs.djangoproject.com/en/5.1/ref/forms/widgets/
# A widget is Django’s representation of an HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget. The HTML generated by the built-in widgets uses HTML5 syntax. The attrs dictionary inside each widget mimics the HTML form attributes (class, placeholder, and id). Widgets help add custom attributes like class, id, placeholder, style, etc.
# Why use forms? - Django’s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves. It generates equivalent HTML5 code and simplifies taking input. Also provides reusuablity for the same templates.
class CustomerForm(forms.Form):
    first_name = forms.CharField(
        max_length=50,
        widget=forms.TextInput(
            attrs={
                "class": "form__input",
                "placeholder": "First Name",
                "id": "first_name",
            }
        ),
        label="First Name",
        label_suffix="",  # by default django appends a ':' to the field
    )

    # Equivale HTML
    # <label for="first_name">First Name</label>
    # <input type="text" name="first_name" class="form__input" placeholder="First Name" id="first_name" maxlength="50">

    last_name = forms.CharField(
        max_length=50,
        widget=forms.TextInput(
            attrs={
                "class": "form__input",
                "placeholder": "Last Name",
                "id": "last_name",
            }
        ),
        label="Last Name",
        label_suffix="",
    )

    # Equivalent HTML
    # <label for="last_name">Last Name</label>
    # <input type="text" name="last_name" class="form__input" placeholder="Last Name" id="last_name" maxlength="50">

    phone_number = forms.CharField(
        max_length=15,
        widget=forms.NumberInput(
            attrs={
                "class": "form__input",
                "placeholder": "Phone Number",
                "id": "phone_number",
            }
        ),
        label="Phone Number",
        label_suffix="",
    )

    # Equivalent HTML
    # <label for="phone_number">Phone Number</label>
    # <input type="number" name="phone_number" class="form__input" placeholder="Phone Number" id="phone_number" maxlength="15">

    email = forms.EmailField(
        widget=forms.EmailInput(
            attrs={"class": "form__input", "placeholder": "Email", "id": "email"}
        ),
        label="Email",
        label_suffix="",
    )

    # Equivale HTML
    # <label for="email">Email</label>
    # <input type="email" name="email" class="form__input" placeholder="Email" id="email">

    address = forms.CharField(
        max_length=255,
        widget=forms.TextInput(
            attrs={"class": "form__input", "placeholder": "Address", "id": "address"}
        ),
        label="Address",
        label_suffix="",
    )

    # Equivale HTML
    # <label for="address">Address</label>
    # <input type="text" name="address" class="form__input" placeholder="Address" id="address" maxlength="255">


# These are not true quivalents since Django does it's own validation - how? - is_valid() method checks for errors. If all fields pass validation, is_valid() returns True, otherwise False. Errors are stored in form.errors.


class MenuItemForm(forms.ModelForm):
    # no need to redefine fields and use separate save functions to commit to database. Defining model in meta class allows us to link form fields to the model
    class Meta:
        model = MenuItem
        fields = ["name", "desc", "image", "price"]

        widgets = {
            "name": forms.TextInput(
                attrs={"class": "form__input", "placeholder": "Menu Item Name"}
            ),
            "desc": forms.Textarea(
                attrs={"class": "form__input", "placeholder": "Description"}
            ),
            "image": forms.ClearableFileInput(),
            "price": forms.NumberInput(attrs={"class": "form__input", "min": "0"}),
        }
