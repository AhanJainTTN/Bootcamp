from django import forms
from menu.models import MenuItem
from .validators import validate_image

# https://docs.djangoproject.com/en/5.1/topics/forms/
# https://docs.djangoproject.com/en/5.1/ref/forms/widgets/

# A widget is Django’s representation of an HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget. The HTML generated by the built-in widgets uses HTML5 syntax. The attrs dictionary inside each widget mimics the HTML form attributes (class, placeholder, and id). Widgets help add custom attributes like class, id, placeholder, style, etc.
# Why use forms? - Django’s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves. It generates equivalent HTML5 code and simplifies taking input. Also provides reusuablity for the same templates.


# no need to redefine fields and use separate save functions to commit to database.
# Defining model in meta class allows us to link form fields to the model
class MenuItemForm(forms.ModelForm):

    def clean_image(self):
        image = self.cleaned_data["image"]
        validate_image(image)

        return image

    class Meta:
        model = MenuItem
        fields = ["name", "description", "price", "image"]

        widgets = {
            "name": forms.TextInput(
                attrs={"class": "input-field", "placeholder": "Enter item"}
            ),
            "description": forms.Textarea(
                attrs={"class": "input-field", "placeholder": "Enter description"}
            ),
            "price": forms.NumberInput(
                attrs={
                    "class": "input-field",
                    "placeholder": "Enter price",
                    "min": 0,
                }
            ),
            "image": forms.ClearableFileInput(),
        }
